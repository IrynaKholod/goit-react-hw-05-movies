{"version":3,"file":"static/js/198.a0288497.chunk.js","mappings":"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","sources":["Api/Api.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","pages/Home/Home.styled.js","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.syled.js","pages/Movies/Movies.jsx"],"sourcesContent":["// /trending/get-trending список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /search/search-movies поиск кинофильма по ключевому слову на странице фильмов.\n// /movies/get-movie-details запрос полной информации о фильме для страницы кинофильма.\n// /movies/get-movie-credits запрос информации о актёрском составе для страницы кинофильма.\n// /movies/get-movie-reviews запрос обзоров для страницы кинофильма.\n\nimport axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '25da517c2bc168beb7d03992630b742e';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return response.data;\n};\n","import styled from \"styled-components\";\n\nexport const LoaderBox = styled.div`\ndisplay: flex;\njustify-content: center;\nmargin-top: 30px\n`","import React from 'react';\nimport {LoaderBox} from './Loader.styled'\nimport { TailSpin} from 'react-loader-spinner';\n\nexport  class Loader extends React.Component {\n  render() {\n    return (\n      <LoaderBox>\n        <TailSpin width=\"400\" color=\"#3f51b5\" />\n      </LoaderBox>\n    );\n  }\n}","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const HomeTitle = styled.h2`\n  text-align: center;\n`;\nexport const SyledLink = styled(NavLink)`\n  outline: none;\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport const TrendsList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  gap: 20px;\n`;\n\nexport const Poster = styled.img`\n  box-shadow: 0px 2px 1px 0px #00000033, 0px 2px 1px 0px #00000033,\n    0px 1px 3px 0px #0000001f;\n`;\n","import styled from \"styled-components\";\n\nexport const SearchContainer =styled.div`\ndisplay:flex;\nalign-items: center;\n`","import {AiOutlineSearch} from \"react-icons/ai\";\nimport {SearchContainer} from \"./SearchBox.styled\"\nexport const SearchBox =({onChange, value}) => {\n    return (\n        <SearchContainer>\n             <input type=\"text\" placeholder=\"Search\" value={value} onChange={e=> onChange(e.target.value)} />\n             <AiOutlineSearch size =\"20\" color= \"grey\"/>\n        </SearchContainer>\n    )\n}","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const SyledLink = styled(NavLink)`\n  outline: none;\n  text-decoration: none;\n  color: inherit;\n`;\n","import PropTypes from 'prop-types';\nimport { SearchBox } from 'components/SearchBox/SearchBox';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { searchMovies } from '../../Api/Api';\nimport { TrendsList, Poster } from '../Home/Home.styled';\nimport { Loader } from '../../components/Loader/Loader';\nimport { Container } from '../Layout/Layout.syled';\nimport { SyledLink } from './Movies.syled';\nimport noImage from '../../image/noImage.jpg';\n\nconst Movies = () => {\n  const [moviesList, setMoviesList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    async function getMoviesBySearch() {\n      if (!query) {\n        return;\n      }\n      setIsLoading(true);\n      try {\n        await searchMovies(query).then(responce => {\n          if (responce.total_results === 0) {\n            return Promise.reject(new Error(`No movies with word \"${query}\"`));\n          }\n          setMoviesList(p => (p = responce.results));\n          setIsLoading(false);\n        });\n      } catch (error) {\n        console.log('Error');\n      }\n    }\n\n    getMoviesBySearch();\n  }, [query]);\n\n  const FindeMovie = query => {\n    setSearchParams(query !== '' ? { query } : {});\n  };\n\n  return (\n    <Container>\n      <SearchBox onChange={FindeMovie} value={query} />\n      <TrendsList>\n        {moviesList.map(movie => (\n          <li key={movie.id}>\n            <SyledLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              <Poster\n                src={\n                  movie.poster_path\n                    ? `https://image.tmdb.org/t/p/w342${movie.poster_path}`\n                    : noImage\n                }\n                alt={movie.original_title}\n              />\n              <h3>{movie.original_title}</h3>\n            </SyledLink>\n          </li>\n        ))}\n      </TrendsList>\n      {isLoading && <Loader />}\n    </Container>\n  );\n};\n\nMovies.propTypes = {\n  movie: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default Movies;\n"],"names":["axios","API_KEY","getTrending","response","data","searchMovies","query","getMovieDetails","id","getMovieCredits","getMovieReviews","LoaderBox","styled","Loader","width","color","React","HomeTitle","SyledLink","NavLink","TrendsList","Poster","SearchContainer","SearchBox","onChange","value","type","placeholder","e","target","size","useState","moviesList","setMoviesList","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","get","useEffect","then","responce","total_results","Promise","reject","Error","p","results","console","log","getMoviesBySearch","map","movie","to","state","from","src","poster_path","noImage","alt","original_title"],"sourceRoot":""}